asyncapi: 3.0.0
info:
  title: 3th Chat Server WebSocket API
  version: 1.0.0
  description: |
    실시간 채팅 서버의 WebSocket API 문서입니다.
    STOMP 프로토콜을 사용하여 채팅방 입장, 메시지 송수신, 퇴장 기능을 제공합니다.
defaultContentType: application/json
servers:
  development:
    host: 'localhost:8080'
    pathname: /ws-chat
    protocol: ws
    description: 개발 환경 웹소켓 서버
channels:
  /pub/chat/send:
    address: /pub/chat/send
    messages:
      sendChatMessage.message:
        $ref: '#/components/messages/SendMessage'
    description: 채팅 메시지를 전송하는 채널
  '/pub/chat/join/{roomId}':
    address: '/pub/chat/join/{roomId}'
    messages:
      joinChatRoom.message:
        $ref: '#/components/messages/JoinRoom'
    description: 특정 채팅방에 입장하는 채널
    parameters:
      roomId:
        $ref: '#/components/parameters/RoomId'
  '/pub/chat/leave/{roomId}':
    address: '/pub/chat/leave/{roomId}'
    messages:
      leaveChatRoom.message:
        $ref: '#/components/messages/LeaveRoom'
    description: 특정 채팅방에서 퇴장하는 채널
    parameters:
      roomId:
        $ref: '#/components/parameters/RoomId'
  '/sub/chat/room/{roomId}':
    address: '/sub/chat/room/{roomId}'
    messages:
      receiveChatMessage.message:
        $ref: '#/components/messages/ChatMessage'
    description: 특정 채팅방의 메시지를 구독하는 채널
    parameters:
      roomId:
        $ref: '#/components/parameters/RoomId'
  /user/queue/unsubscribe:
    address: /user/queue/unsubscribe
    messages:
      receiveUnsubscribeCommand.message:
        $ref: '#/components/messages/UnsubscribeCommand'
    description: 개인에게 구독 해제 명령을 전송하는 채널
operations:
  sendChatMessage:
    action: receive
    channel:
      $ref: '#/channels/~1pub~1chat~1send'
    summary: 채팅 메시지 전송
    description: 특정 채팅방에 메시지를 전송합니다.
    messages:
      - $ref: '#/channels/~1pub~1chat~1send/messages/sendChatMessage.message'
  joinChatRoom:
    action: receive
    channel:
      $ref: '#/channels/~1pub~1chat~1join~1{roomId}'
    summary: 채팅방 입장
    description: 특정 채팅방에 입장합니다.
    messages:
      - $ref: '#/channels/~1pub~1chat~1join~1{roomId}/messages/joinChatRoom.message'
  leaveChatRoom:
    action: receive
    channel:
      $ref: '#/channels/~1pub~1chat~1leave~1{roomId}'
    summary: 채팅방 퇴장
    description: 특정 채팅방에서 퇴장합니다.
    messages:
      - $ref: '#/channels/~1pub~1chat~1leave~1{roomId}/messages/leaveChatRoom.message'
  receiveChatMessage:
    action: send
    channel:
      $ref: '#/channels/~1sub~1chat~1room~1{roomId}'
    summary: 채팅 메시지 수신
    description: 구독한 채팅방에서 메시지를 수신합니다.
    messages:
      - $ref: >-
          #/channels/~1sub~1chat~1room~1{roomId}/messages/receiveChatMessage.message
  receiveUnsubscribeCommand:
    action: send
    channel:
      $ref: '#/channels/~1user~1queue~1unsubscribe'
    summary: 구독 해제 명령 수신
    description: 서버에서 보낸 구독 해제 명령을 수신합니다.
    messages:
      - $ref: >-
          #/channels/~1user~1queue~1unsubscribe/messages/receiveUnsubscribeCommand.message
components:
  messages:
    SendMessage:
      name: SendMessage
      title: 메시지 전송
      summary: 채팅 메시지를 전송합니다
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CreateChatMessageDto'
    JoinRoom:
      name: JoinRoom
      title: 채팅방 입장
      summary: 채팅방에 입장합니다
      contentType: application/json
      payload:
        type: object
        properties: {}
    LeaveRoom:
      name: LeaveRoom
      title: 채팅방 퇴장
      summary: 채팅방에서 퇴장합니다
      contentType: application/json
      payload:
        type: object
        properties: {}
    ChatMessage:
      name: ChatMessage
      title: 채팅 메시지
      summary: 채팅방에서 수신하는 메시지
      contentType: application/json
      payload:
        $ref: '#/components/schemas/MessageDto'
    UnsubscribeCommand:
      name: UnsubscribeCommand
      title: 구독 해제 명령
      summary: 서버에서 보내는 구독 해제 명령
      contentType: text/plain
      payload:
        type: string
        description: 구독 해제할 채팅방 ID
  schemas:
    CreateChatMessageDto:
      type: object
      description: 채팅 메시지 생성 DTO
      properties:
        content:
          type: string
          description: 메시지 내용
          example: 안녕하세요!
        chatRoomId:
          type: integer
          format: int64
          description: 채팅방 ID
          example: 1
      required:
        - content
        - chatRoomId
    MessageDto:
      type: object
      description: Redis를 통해 전송되는 메시지 DTO
      properties:
        content:
          type: string
          description: 메시지 내용
          example: 안녕하세요!
        roomId:
          type: string
          description: 채팅방 ID
          example: '1'
        sender:
          type: string
          description: 발신자 사용자 ID
          example: '123'
        timestamp:
          type: string
          description: 메시지 전송 시간
          example: '2024-01-01T12:00:00Z'
      required:
        - content
        - roomId
        - sender
        - timestamp
  parameters:
    RoomId:
      description: 채팅방의 고유 식별자
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT 토큰을 사용한 인증입니다.
        STOMP 연결 시 헤더에 Authorization: Bearer <token> 형태로 전송해야 합니다.
